name: Build and Release macOS App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest

    env:
      APP_NAME: "Video Thing"
      SCRIPT_NAME: "app.py"

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6 setuptools

    - name: Prepare APP_DIR
      run: |
        echo "APP_DIR=./dist/${APP_NAME}.app" >> $GITHUB_ENV

    - name: Prepare CONTENTS_DIR
      run: |
        echo "CONTENTS_DIR=$APP_DIR/Contents" >> $GITHUB_ENV

    - name: Prepare MACOS_DIR
      run: |
        echo "MACOS_DIR=$CONTENTS_DIR/MacOS" >> $GITHUB_ENV

    - name: Assemble app bundle
      run: |
        # Clean previous builds
        echo "Cleaning previous builds..."
        rm -rf "$APP_DIR"
        mkdir -p "$(dirname "$APP_DIR")"
        cp -R template "$APP_DIR"

        # Create app directory structure
        echo "Creating app bundle structure..."
        mkdir -p "$MACOS_DIR" "$CONTENTS_DIR/Frameworks"

        # Copy app resources
        echo "Copying application resources..."
        cp "$SCRIPT_NAME" "$CONTENTS_DIR/Resources/"

    - name: Get version from file or set default
      id: get_version
      run: |
        if [ -f "version.txt" ]; then
          VERSION=$(cat version.txt)
        else
          VERSION=1
        fi

        # get latest tag, could also be empty
        tag=$(git tag --sort=v:refname | grep "v$VERSION\." | tail -n 1)

        # if there are none, start tags at INITIAL_VERSION which defaults to 0.0.0
        if [ -z "$tag" ]; then
          tag="v$VERSION.0.0"
        else
          array=($(echo "$tag" | tr . '\n'))
          array[2]=$((array[2]+1))
          tag=$(IFS=.; echo "${array[*]}")
        fi

        # export env var for subsequent steps
        echo "VERSION=$tag" >> $GITHUB_OUTPUT
        echo "VERSION=$tag" >> $GITHUB_ENV

    - name: Update Info.plist
      run: |
        sed -i '' "s/_APP_VERSION_/$VERSION/g" "$CONTENTS_DIR/Info.plist"

    #- name: Ad-hoc Code Sign App
    #  run: |
    #    codesign --force --deep --sign - "$APP_DIR"
    #
    - name: Install create-dmg
      run: |
        brew install create-dmg

    #- name: Create DMG file
    #  run: |
    #    hdiutil create -volname "$APP_NAME" -srcfolder "$APP_DIR" -ov -format UDZO "dist/$APP_NAME.dmg"

    - name: Create DMG file
      run: |
        # Create a customized DMG
        create-dmg \
          --volname "$APP_NAME" \
          --background "background.png" \
          --window-pos 200 120 \
          --window-size 800 500 \
          --icon-size 100 \
          --icon "$APP_NAME.app" 170 230 \
          --app-drop-link 500 230 \
          --text-size 11 \
          --text-color FFFFFF \
          "dist/$APP_NAME.dmg" \
          "$APP_DIR"

          #--no-internet-enable \

    - name: Create release
      id: create_release
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: |
          dist/Video Thing.dmg
        token: ${{ secrets.GITHUB_TOKEN }}
